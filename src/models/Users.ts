import { Pool } from "pg";
import {
  Kysely,
  PostgresDialect,
  Generated,
  ColumnType,
  Selectable,
  Insertable,
  Updateable,
  UniqueConstraintNode,
} from "kysely";

export enum UserRoleEnum {
  ADMIN = "admin",
  USER = "user",
}

type UserRole = `${UserRoleEnum}`;

export interface UsersTable {
  // Columns that are generated by the database should be marked
  // using the `Generated` type. This way they are automatically
  // made optional in inserts and updates.
  id: Generated<number>;
  first_name: string | null;
  last_name: string | null;
  // If the column is nullable in the database, make its type nullable.
  // Don't use optional properties. Optionality is always determined
  // automatically by Kysely.
  username: string;
  password: string;
  email: string;
  role: UserRole;
  // You can specify a different type for each operation (select, insert and
  // update) using the `ColumnType<SelectType, InsertType, UpdateType>`
  // wrapper. Here we define a column `modified_at` that is selected as
  // a `Date`, can optionally be provided as a `string` in inserts and
  // can never be updated:
  modified_at: ColumnType<Date, string | undefined, never>;
  created_at: ColumnType<Date, string | undefined, never>;
}

export type FetchedUserData = {
  id: string;
  username: string;
  first_name: string | null;
  last_name: string | null;
  email: string;
};
